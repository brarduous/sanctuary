import Head from "next/head";
import Image from "next/image";
import { AppBar, Autocomplete, Box, Button, Card, CardContent, Dialog, DialogActions, DialogContent, Drawer, ListItemIcon, ListItemText, MenuItem, MenuList, TextField, ThemeProvider, Toolbar, Typography } from "@mui/material";
import sanctuaryTheme from "@/styles/sanctuaryTheme";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { supabase } from '@/lib/supabaseClient';

// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getDatabase, ref, set } from "firebase/database";
import { getAnalytics } from "firebase/analytics";
import {getAuth, getRedirectResult, signInWithPopup, signInWithRedirect} from "firebase/auth";
import { GoogleAuthProvider } from "firebase/auth";

import { app, saveSermon } from "@/utils/firebaseConfig"; // Ensure this path points to your Firebase configuration file


import HistoryEduIcon from '@mui/icons-material/HistoryEdu';
import SanctuaryMenu from "@/components/layout/SanctuaryMenu";
import ScriptureSelector from "@/components/input/ScriptureSelector";
import { getSermonByScripture, getSermonByTopic } from "@/utils/gemini";

//create Sermon type
export type Sermon = {
    scripture: string;
    title: string;
    sermon_outline: string;
    key_takeaways: string;
    sermon_body: string;
    illustration?: string;
  
  };
export type Scripture = {
    book: string;
    chapter: number;
    verse: number;
  };


export default function Home() {
  const router = useRouter();
  const user = getAuth(app).currentUser;

  const [authenticated, setAuthenticated] = useState(false);
  const [sermonModalOpen, setSermonModalOpen] = useState(false);
  const [sermonType, setSermonType] = useState('');
  const [scripture, setScripture] = useState<Scripture | null>(null);
    const [topic, setTopic] = useState('');
  
    function newSermonFromScripture() {
        setSermonType('scripture');
        setSermonModalOpen(true);
    }
    function newSermonFromTopic() {
        setSermonType('topic');
        setSermonModalOpen(true);
    }
  useEffect(() => {
    
    const checkAuth = async () => {
      console.log(getAuth(app).currentUser);
      console.log(user);
      if (!user) {
        router.push('/login'); // Redirect to login if not authenticated
      } else {
        setAuthenticated(true);
      }
    };
    checkAuth();
  }, [router]);

  if (!authenticated) return null; // Prevent rendering until authentication is checked

  return (
<>
      <Head>
        <title>Sanctuary App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <SanctuaryMenu />
    
    <div style={{ marginLeft: '240px', padding: '20px' }}>
        <h1 style={{textAlign:"center", padding:'3rem 0'}}>Welcome {user?.displayName}</h1>
        <p>Start a new sermon:</p>
        <div style={{ display: 'flex', justifyContent: 'start', alignItems: 'center' }}>
            <Card onClick={newSermonFromScripture} sx={{  margin: 2, backgroundColor: 'white', borderRadius: 2, width: '150px' }}>
                <CardContent>
                <h3>From Scripture</h3>
                </CardContent>
            </Card>
            <Card onClick={newSermonFromTopic} sx={{  margin: 2, backgroundColor: 'white', borderRadius: 2, width: '150px' }}>
                <CardContent>
                <h3>From Topic</h3>
                </CardContent>
            </Card>
        </div>

    </div>
    <Dialog open={sermonModalOpen} onClose={() => setSermonModalOpen(false)} fullWidth maxWidth="md">
        <DialogContent style={{ padding: '20px' }}>   
            {sermonType == "scripture"? 
            (
            <><h2>Select your Scripture</h2>
            <p>Choose a scripture to base your sermon on.</p>
            <ScriptureSelector onSelectionChange={(selectedScripture) => {console.log(selectedScripture); setScripture(selectedScripture)}} />
            </>
            )
            : sermonType == "topic" ?
            (<><h2>Select your Topic</h2>
            <p>Choose a topic to base your sermon on.</p>
            <TextField label="Topic" variant="outlined" fullWidth margin="normal" onChange={(event)=>{setTopic(event.currentTarget.value)}} />
            </>)
            : null}
        </DialogContent>
        <DialogActions>
        <Button variant="contained" onClick={() => { 
          if(scripture && sermonType == 'scripture'){
            const scriptureString = scripture.chapter + " " + scripture.verse + " " + scripture.book;
            getSermonByScripture(scriptureString).then((e) =>{
                if(e == null) return;
                console.log(e);
                const jsonRegex = /```json\s*([\s\S]*?)\s*```/;

                const match = e.match(jsonRegex);

                if (match && match[1]) {
                    // match[1] contains the captured group (the content inside ```json ... ```)
                    const jsonString = match[1].trim(); // Trim whitespace

                    const sermon: Sermon = JSON.parse(jsonString);
                    saveSermon(sermon);
                }else{
                    console.log("No JSON found in the response.");
                }
              });
            }
          else if(sermonType == 'topic'){ 
            getSermonByTopic(topic).then((e) =>{
                if(e == null) return;
                console.log(e);
                const jsonRegex = /```json\s*([\s\S]*?)\s*```/;

                const match = e.match(jsonRegex);

                if (match && match[1]) {
                    // match[1] contains the captured group (the content inside ```json ... ```)
                    const jsonString = match[1].trim(); // Trim whitespace

                    const sermon: Sermon = JSON.parse(jsonString);
                    saveSermon(sermon);
                }else{
                    console.log("No JSON found in the response.");
                }
            }) } }}>Select</Button>
        <Button variant="contained" onClick={() => {setSermonModalOpen(false); setSermonType('')} }>Cancel</Button>
        </DialogActions>
    </Dialog>
    
    
    </>

    
  );
}
